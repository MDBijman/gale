
main: Program(fns) ->
     (constants, new_fns) := !env_bottomup[.try[.collect_string]] ([], fns)
  in Program(Sections([ConstantSection(constants), FunctionSection(!map[!compile] new_fns)]));

collect_string: (constants, StringLiteral(s)) -> (!concat (constants, [ConstDecl(!len constants, StringLiteral(s))]), ReadConst(!len constants));

compile: (env, [h|t]) -> !env_map[!compile] (env, [h|t]);
compile: Function(name, Pattern(param), body) ->
    !reset_num "loc"
  > param_loc := Var(!gen_num "loc")
  in env := !put[param, param_loc] .new_map ()
  in compiled_body := !compile (env, body) > !second
  in Function(name, [param_loc], compiled_body);
  
#(env, Call(name, !compile (env, expr) > !second));
compile: (env, Store(res, Call(name, arg))) -> 
  .get[res] env 
  ? (env, Store(!id, !compile (env, arg) > !second))
  : (loc := Var(!gen_num "loc")
    in new_env := !put[res, loc] env
    in (new_env, Call(loc, name, !compile (env, arg) > !second)));

compile: (env, Store(name, UnOp("~", op))) ->
  .get[name] env 
  ? (env, Store(!id, !compile (env, op) > !second))
  : (loc := Var(!gen_num "loc")
    in new_env := !put[name, loc] env
    in (new_env, Not(loc, !compile (env, op) > !second)));

compile: (env, Store(name, BinOp("+", lhs, rhs))) ->
  .get[name] env 
  ? (env, Store(!id, !compile (env, expr) > !second))
  : (loc := Var(!gen_num "loc")
    in new_env := !put[name, loc] env
    in (new_env, Add(loc, !compile (env, lhs) > !second, !compile (env, rhs) > !second)));

compile: (env, Store(name, BinOp("-", lhs, rhs))) ->
  .get[name] env 
  ? (env, Store(!id, !compile (env, expr) > !second))
  : (loc := Var(!gen_num "loc")
    in new_env := !put[name, loc] env
    in (new_env, Sub(loc, !compile (env, lhs) > !second, !compile (env, rhs) > !second)));

compile: (env, Store(name, BinOp("=", lhs, rhs))) -> 
  .get[name] env 
  ? (env, Store(!id, !compile (env, expr) > !second))
  : (loc := Var(!gen_num "loc")
    in new_env := !put[name, loc] env
    in (new_env, Eq(loc, !compile (env, lhs) > !second, !compile (env, rhs) > !second)));

compile: (env, Store(name, expr)) ->
  .get[name] env 
  ? (env, Store(!id, !compile (env, expr) > !second))
  : (loc := Var(!gen_num "loc")
    in new_env := !put[name, loc] env
    in (new_env, Store(loc, !compile (new_env, expr) > !second)));


compile: (env, Load(name)) -> (env, Load(!get[name] env));
compile: (env, ReadIdx(expr, idx)) -> (env, Index(!get[expr] env, !get[idx] env));
compile: (env, Return(e)) -> (env, Return(!compile (env, e) > !second));
compile: (env, Array(elems)) -> (env, Array(!env_map[!compile] (env, elems) > !second));
compile: (env, UI8(n)) -> .id;
compile: (env, True()) -> .id;
compile: (env, BinOp(op, lhs, rhs)) -> !debug "binop" > !debug op > !fail;
compile: (env, UnOp(_, expr)) -> !debug "unop" > !fail;
compile: (env, JmpIf(lbl, cond)) -> (env, JmpIf(!compile (env, cond) > !second, lbl));
compile: (env, Not(cond)) -> (env, Not(!compile (env, cond) > !second));
compile: (env, Eq(l, r)) -> (env, Eq(!compile (env, l) > !second, !compile (env, r) > !second));
compile: (env, Lbl(lbl)) -> (env, Lbl(lbl));
compile: (env, Jmp(lbl)) -> (env, Jmp(lbl));
compile: (env, ReadConst(r)) -> (env, ReadConst(r));
compile: t -> !debug t > !fail;
