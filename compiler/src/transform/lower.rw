
main: File(fns) -> Program(!flatmap_some[!lower] fns);

lower: FnDecl(func, type) -> [];
lower: FnDef(func, arg, body){Type(t)} -> Function(func, !extract_signature, !lower body {ShouldRet()});
extract_signature: FnDef(_, a, _){Type(t)} -> In(a);

lower: Let(decls, e){ShouldRet()} -> !concat (!map[!lower] decls, [Return(!lower e)]);
lower: Let(decls, e) -> !concat (!map[!lower] decls, [!lower e]);

lower: Decl(n, t, e) -> Store(n, !lower e);

lower: Appl(fn, arg) -> Call(fn, !lower arg);

lower: Int(i){Type(Builtin("ui8")), ShouldRet()} -> Return(UI8(i));
lower: Int(i){Type(Builtin("ui8"))} -> UI8(i);

lower: Ref(n){ShouldRet()} -> Return(Load(n));
lower: Ref(n) -> Load(n);
lower: Array(elems){ShouldRet()} -> Return(Array(!map[!lower] elems));
lower: Array(elems) -> Array(!map[!lower] elems);
lower: [h|t] -> !map[!lower] [h|t];

# Should be changed, 'let' should accumulate in block, rhs of let shouldn't 
stack_depth: ([], n)      -> n;
stack_depth: ([h|t], n)   -> !stack_depth (t, .add (!stack_depth h, n));
stack_depth: [h|t]        -> !stack_depth ([h|t], 0);

stack_depth: Let(_, t, e) -> !add (!type_size t, !stack_depth e);
stack_depth: Appl(_, e)   -> !stack_depth e;
stack_depth: String(_)    -> 16;
stack_depth: Ref(_){Type(t)} -> !type_size t;
stack_depth: Int(_){Type(Builtin("ui8"))} -> 1;
stack_depth: Return(e)    -> !stack_depth e;
stack_depth: Return()     -> 0;
stack_depth: Tuple()      -> 0;
stack_depth: Brackets(e)  -> !stack_depth e;
stack_depth: Add(l, r)    -> !add (!stack_depth l, !stack_depth r);
stack_depth: Array(l)     -> !stack_depth (l, 0);
stack_depth: ArrIndex(r, i) -> !add (8, !stack_depth i);

type_size: Type(t) -> !type_size t;
type_size: Builtin("string") -> 16;
type_size: Builtin("ui8") -> 1;
type_size: Array(t, Int(n)) -> !mul (!type_size t, n);
type_size: TypeTuple() -> 0; 
type_size: TypeTuple([t]) -> !type_size t; 
type_size: TypeTuple([t|tail]) -> !add (!type_size t, !type_size TypeTuple(tail)); 
type_size: Int(_) -> 8;

input_size: Func(t, _) -> !type_size t;
output_size: Func(_, t) -> !type_size t;
