module modeling

type Vertex = (std.i32 x, std.i32 y, std.i32 z)
type Face = (Vertex a, Vertex b, Vertex c)
type Model = ref [] Face faces

var factorial = fn std.i32 n -> std.i32 = case [
	| eq (n, 1) -> 1
	| eq (1, 1) -> mul (n, factorial sub (n, 1))
]

var create_vertex = fn (std.i32 x, std.i32 y, std.i32 z) -> Vertex = {
	var x = Vertex (x, y, z);
	x
}


var create_face = fn (Vertex a, Vertex b, Vertex c) -> Face = 
	Face (a, b, c)


var translate_v = fn (Vertex v, std.i32 x, std.i32 y, std.i32 z) -> Vertex = 
	Vertex (add (v.x, x),  add (v.y, y),  add (v.z, z))


var translate_f = fn (Face f, std.i32 x, std.i32 y, std.i32 z) -> Face = 
	 Face (translate_v (f.a, x, y, z),  translate_v (f.b, x, y, z),  translate_v (f.c, x, y, z))


var a = Vertex (1, 1, 1)
var b = Vertex (2, 2, 2)

var z = case [
	| gte(0, 1) -> 3
	| lt(1, 3) -> factorial 5
]

export Face Vertex