module modeling

type Vertex (std.i32 x, std.i32 y, std.i32 z) 
type Face (Vertex a, Vertex b, Vertex c)
type Model (ref Face[] faces)

create_vertex = fn (std.i32 x, std.i32 y, std.i32 z) -> Vertex = {
	Vertex (x, y, z)
}

create_face = fn (Vertex a, Vertex b, Vertex c) -> Face = {
	Face (a, b, c)
}

translate_v = fn (Vertex v, std.i32 x, std.i32 y, std.i32 z) -> Vertex = {
	Vertex (add (v.x, x), add (v.y, y), add (v.z, z))
}

translate_f = fn (Face f, std.i32 x, std.i32 y, std.i32 z) -> Face = {
	Face (translate_v (f.a, x, y, z), translate_v (f.b, x, y, z), translate_v (f.c, x, y, z))
}

a = Vertex (1, 1, 1)
b = Vertex (2, 2, 2)
c = Vertex (3, 4, 3)
d = Face (a, b, c)

z = case [
	| gte(0, 1) -> 3
	| lt(1, 3) -> 5
]

export Face Vertex
