module modeling
import [std]

fn factorial std.i32 x -> std.i32 = x match {
	| x == 1 -> 1
	| 1 == 1 -> x * factorial (x - 1)
};

type Vertex = (std.i32 x, std.i32 y, std.i32 z);
type Face = (Vertex a, Vertex b, Vertex c);
type Model = ref [] Face faces;

fn new_vertex (std.i32 x, std.i32 y, std.i32 z) -> Vertex = Vertex (x, y, z);
fn new_face (Vertex a, Vertex b, Vertex c) -> Face = Face (a, b, c);

fn translate_v (Vertex v, std.i32 x, std.i32 y, std.i32 z) -> Vertex = 
	Vertex (add (v.x, x), add (v.y, y), add (v.z, z));

fn translate_f (Face f, std.i32 x, std.i32 y, std.i32 z) -> Face = 
	 Face (translate_v (f.a, x, y, z), translate_v (f.b, x, y, z), translate_v (f.c, x, y, z));

var a: Vertex = Vertex (1, 1, 1);
var b: Vertex = Vertex (2, 2, 2);
var c: Vertex = translate_v (a, 1, 2, 1);
var d: Vertex = translate_v (c, 1, 2, 1);

var test: std.i32 = factorial 5;

export Face Vertex;