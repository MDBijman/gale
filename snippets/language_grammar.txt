file := [ module_declaration ], statement*
module_declaration := 'module', identifier

statement := 
	type_definition |
	export_stmt |
	assignment

export_stmt := 'export', identifier*
assignment := identifier, '=', expression 

expression :=
	value_tuple |
	word |
	function_call |
	identifier |
	number |
	function |
	branch |
	block

block := '{', expression*, '}'
value_tuple := '(', [tuple_element], ')'
tuple_element := expression, [',', tuple_element]

function := 'function', variable_declaration, '->', type_expression, '=', expression
function_call := 'call', identifier, expression

branch := 'case', '[', branch_element*, ']'
branch_element := '|', expression, '->', expression

variable_declaration := atom_variable_declaration | tuple_variable_declaration

atom_variable_declaration := type_expression, identifier
tuple_variable_declaration := '(', variable_declaration, (',', variable_declaration)*, ')'

type_expression :=
	identifier, ['[', ']'] |
	type_function |
	type_tuple

type_tuple :=
	'(', type_tuple_elements, ')'

type_tuple_elements :=
	type_expression, [',', type_tuple_elements]

type_function := 'function', type_expression, '->', type_expression

type_definition := 'type', identifier, variable_declaration

