assignment    = Terminal
identifier    = Terminal
number        = Terminal
print_keyword = Terminal

lexer = Lexer (
	Tokens [
		Token("="                  assignment)
		Token("[a-zA-Z][a-zA-Z_]*" identifier)
		Token("[1-9][0-9]*"        number)
	]

	Keywords [
		Keyword("print" print_keyword)
	]
)

variable  = NonTerminal
print     = NonTerminal
file      = NonTerminal
statement = NonTerminal

parser = Parser (
	Terminals [assignment identifier number]

	NonTerminals [variable print file statement]

	RuleSet [
		Rule(file      Repeat(statement))
		Rule(statement Or(print variable))
		Rule(variable  And(identifier assignment number))
		Rule(print     And(print_keyword identifier))
	]
)

type CST = Leaf (value token) | Inner (value children)

transform CST > AST = 
	Leaf (identifier token) => Identifier (token)
	| Leaf (assignment _) => Nil
	| Leaf (number token) => Number (token)
	| Leaf (print_keyword) => Error ("This branch shouldn't be reached")
	
	| Inner (variable c) => Assignment (transform (get (c 0)) transform (get (c 2))
	| Inner (print c) => FunctionCall ("print" transform(get (c 1)))
	| Inner (file c) => NodeList(map (transform c))
	| Inner (statement c) => transform(get (c 0))

g = Grammar (lex parse transform)

