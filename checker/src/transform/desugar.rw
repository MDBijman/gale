
main: File(mod, fns) -> 
   File(mod, fns > !desugar_partial_application > !make_everything_closure > !lift_closures > !desugar_function_ref > !add_empty_closures_to_fn_refs > !desugar_closure_appl > !join_definitions > !matches_to_ifs > !remove_brackets > !desugar_indexing);

# Explicit currying with closures in functions that match multiple arguments

desugar_partial_application: fns -> !map[!partial_application_to_closure] fns;

partial_application_to_closure: FnDecl(name, type) -> .id;
partial_application_to_closure: FnDef(name, [p], body){..a} -> FnDef(name, p, body){..a};
partial_application_to_closure: FnDef(name, [p|t], body){Type(FnType(in_type, out_type)), ..a} -> 
      closure_type := ClosureType([(p, in_type)], out_type)
   in closure_body := !desugar_multi_param_closure Closure(t, body){Type(closure_type)}
   in FnDef(name, p, closure_body){Type(FnType(in_type, !convert_closure_type_to_function_type closure_type)), ..a};

desugar_multi_param_closure: Closure([p], body){..a} -> Closure(p, body){..a};
desugar_multi_param_closure: Closure([p|t], body){..a} -> !fail "Not yet implemented";

# Turns all functions into closure-taking functions for homogenity after desugaring partial applications

make_everything_closure: fns -> !map[!function_to_closure] fns;

function_to_closure: FnDecl(name, type){..a} -> FnDecl(name, !make_function_type_closure_type type){..a};
function_to_closure: FnDef(name, p, body){Type(FnType(i, o)), ..a} -> FnDef(name, !make_function_pattern_closure_pattern p, body){Type(!make_function_type_closure_type FnType(i, o)), ..a};

make_function_type_closure_type: FnType(i, o) -> FnType(TypeTuple([TypeTuple([]), i]), o);
make_function_pattern_closure_pattern: p -> PatternTuple([PatternIgnore(), p]);

# Creates new functions for anonymous closures

lift_closures: fns -> !env_map[!lift_closures_in_function] ([], fns) > !concat;

lift_closures_in_function: (env, fn) -> !env_bottomup[!try[!lift_closure]] (env, fn);

lift_closure: (env, Closure(pat, expr){Type(ClosureType(captures, signature))}) ->
      closure_name := !gen_name "_closure"
   in closure_as_fn_type := !convert_closure_type_to_function_type ClosureType(captures, signature)
   in closure_as_fn_pattern := !make_closure_pattern (captures, pat)
   in closure_decl := FnDecl(closure_name, closure_as_fn_type)
   in closure_def  := FnDef(closure_name, closure_as_fn_pattern, expr){Type(closure_as_fn_type)}
   in bound_closure_variables := !gather_binding_variables pat
   in free_closure_variables  := !gather_free_variables[bound_closure_variables] expr
   in (!concat ([closure_decl, closure_def], env), Tuple([Tuple(free_closure_variables), Ref(closure_name){FnRef()}]));

convert_closure_type_to_function_type: ClosureType(captures, FnType(i, o)) -> FnType(TypeTuple([TypeTuple(!map[!snd] captures), i]), o);
make_closure_pattern: (captures, pat) -> PatternTuple([PatternTuple(!map[!fst] captures), pat]);

gather_binding_variables: pattern -> !gather[.is_pattern_variable] pattern;
is_pattern_variable: PatternVar(n) -> n;

gather_free_variables[bindings]: expr -> !gather[.is_free_variable[bindings]] expr;
is_free_variable[bindings]: Ref(n){..a} -> .find[n] bindings ? .fail : Ref(n){..a};

# Transforms Ref of function into FnRef

desugar_function_ref: fns -> !bottomup[!try[!desugar_function_ref_one]] fns;

desugar_function_ref_one: Ref(name){VarRef()} -> !id;
desugar_function_ref_one: Ref(name){FnRef(), ..a} -> FnRef(name){FnRef(), ..a};
desugar_function_ref_one: Ref(name) -> !debug > !fail "Cannot desugar ref without its annotated ref kind";

# Transforms a FnRef into a Tuple([Tuple([]), FnRef(n)]) for closure homogenity

add_empty_closures_to_fn_refs: fns -> !bottomup[!try[!add_empty_closure_to_fn_ref]] fns;
add_empty_closure_to_fn_ref: FnRef(n){..a} -> Tuple([Tuple([]), FnRef(n)]){..a};

# Desugar applications of (env, fn)

desugar_closure_appl: fns -> !bottomup[!try[!desugar_single_closure_appl]] fns;
desugar_single_closure_appl: Appl(closure, arg){..a} -> 
      env_name := !gen_name "_env"
   in fn_ref   := !gen_name "_fn"
   in Let([
      Decl(env_name, AnyType(), TupleIndex(closure, Int(0))),
      Decl(fn_ref, AnyType(), TupleIndex(closure, Int(1)))
   ], Appl(Ref(fn_ref){VarRef()}, Tuple([Ref(env_name){VarRef()}, arg])){..a}){..a};

# Separated function definitions desugaring into single function with branch

join_definitions: fns -> !group_functions fns > !map[!merge_functions];

group_functions: fns -> 
     func_map := .new_map ()
  in !env_map[!group_one] (func_map, fns) > !fst;

group_one: (env, FnDecl(_, _)) -> .id;
group_one: (env, FnDef(name, pattern, body){Type(t)}) ->
      (fn_group    := .map_get[name] env
   in new_fn_group := [FnDef(name, pattern, body){Type(t)} | fn_group]
   in new_env      := !put[name, new_fn_group] env
   in (new_env, FnDef(name, pattern, body){Type(t)}))
   +  (new_fn_group := [FnDef(name, pattern, body){Type(t)}]
   in (.put[name, new_fn_group] env, FnDef(name, pattern, body){Type(t)}));

merge_functions: (name, [h{Type(FnType(i, o))}|t]) ->
     FnDef(name, "_arg", !reverse [h|t] > !map[!to_match_branch] > !merge_match_branches[i]){Type(FnType(i, o))};

to_match_branch: FnDef(_, p, b) -> MatchBranch(p, b);
merge_match_branches[ty]: branches -> Match(Ref("_arg"){Type(ty)}, branches);

# Match desugaring into if-then-else chains

matches_to_ifs: fns -> !topdown[!try[.desugar_match]] fns;

desugar_match: Match(arg, branches) ->
   !map[!branch_to_if[arg]] branches > !reverse > !reduce[!merge_if] (Panic(), .id);
merge_if: (Panic(), If(expr, stmt)) -> If(expr, stmt, Panic());
merge_if: (if_chain, If(expr, stmt)) -> If(expr, stmt, if_chain);

branch_to_if[arg]: MatchBranch(pattern, body) ->  
   If(!pattern_to_boolean (arg, pattern) > !merge_boolean_exprs > !bottomup[!try[!fold_tautology]], Let(!pattern_to_decls (arg, pattern), body));

# Turns pattern matching into a boolean expression

pattern_to_boolean: (arg, PatternIgnore()) -> [True()];
pattern_to_boolean: (arg, PatternVar(name)) -> [True()];
pattern_to_boolean: (arg, PatternNum(num)) -> [Eq(arg, num)];
pattern_to_boolean: (arg, PatternStr(str)) -> [Eq(arg, str)];
pattern_to_boolean: (arg, PatternTuple(elems)) -> !enumerate elems > !flatmap[!make_tuple_elem_compare[arg]];
make_tuple_elem_compare[tuple]: (idx, elem) -> !pattern_to_boolean (TupleIndex(tuple, idx), elem);
pattern_to_boolean: (arg, [p]) -> .pattern_to_boolean (arg, p);

merge_boolean_exprs: [h|t] -> And(h, !merge_boolean_exprs t);
merge_boolean_exprs: [] -> True();
merge_boolean_exprs: x -> x;

# This is a bit of optimization logic to cleanup generated boolean chains
fold_tautology: And(True(), True()) -> True();
fold_tautology: And(x, True()) -> x;
fold_tautology: And(True(), x) -> x;
fold_tautology: Or(True(), x) -> True();
fold_tautology: Or(x, True()) -> True();

# Turns pattern matching into a declarations that translate bindings from the pattern into declarations

pattern_to_decls: (arg, PatternVar(name)) -> [Decl(name, AnyType(), arg)];
pattern_to_decls: (arg, PatternNum(_)) -> [];
pattern_to_decls: (arg, PatternStr(_)) -> [];
pattern_to_decls: (arg, PatternIgnore()) -> [];
pattern_to_decls: (arg, PatternTuple(elems)) -> !enumerate elems > !flatmap[!make_tuple_elem_decls[arg]];
make_tuple_elem_decls[tuple]: (idx, elem) -> inner_type := !index_tuple_type[idx] tuple in !pattern_to_decls (TupleIndex(tuple, Int(idx)){inner_type}, elem);
pattern_to_decls: (arg, [p]) -> .pattern_to_decls (arg, p);

index_tuple_type[idx]: e{Type(TypeTuple(elems))} -> Type(!list_get[idx] elems);

# Remove brackets

remove_brackets: t -> !bottomup[.try[.remove_bracket]] t;
remove_bracket: Brackets(t) -> t;

# Explicate array index type

desugar_indexing: fns -> !bottomup[!try[.desugar_indexing_inner]];
desugar_indexing_inner: x -> .desugar_array_index_inner + .desugar_tuple_index_inner;

desugar_array_index_inner: ArrIndex(arr{Type(t)}, idx){..a} -> ArrIndex(arr, Type(t), idx){..a};
desugar_tuple_index_inner: ArrIndex(tuple, idx) -> !fail "Missing type on array index";
desugar_tuple_index_inner: TupleIndex(tuple{Type(t)}, idx){..a} -> TupleIndex(tuple, Type(t), idx){..a};
desugar_tuple_index_inner: TupleIndex(tuple, idx) -> !fail "Missing type on tuple index";

