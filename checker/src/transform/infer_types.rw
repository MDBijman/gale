
main: File(fns) ->
     map_with_functions := !env_map[!gather_function_type] (!new_map, fns) > .first
  in File(.env_all[.typecheck] (map_with_functions, fns) > .second);

gather_function_type: (env, FnDecl(name, type)) ->
     as_type := !typeof type
  in (.put[name, as_type] env, FnDecl(name, type));
gather_function_type: _ -> .id;

typecheck: (env, FnDecl(name, type)) -> .id;

typecheck: (env, FnDef(func, param, expr)) ->
     function_type := !get[func] env
  in input_type    := !get_in_type function_type
  in output_type   := !get_out_type function_type
  in new_env       := !put[param, input_type] env
  in (env, FnDef(func, param, !typecheck (new_env, expr {output_type, ReturnType(output_type)}) > .second){function_type});

typecheck: (env, Let(decls, body) {Type(t)}) -> 
     (new_env, checked_decls) := !env_all[.typecheck] (env, decls)
  in (_, checked_body) := !typecheck (new_env, body {Type(t)})
  in (env, Let(checked_decls, checked_body));

typecheck: (env, Decl(name, type, expr)) ->
     as_type := !typeof type
  in new_env := .put[name, as_type] env
  in (new_env, Decl(name, type, !typecheck (env, expr {as_type}) > !second));

typecheck: (env, Int(i){Type(t)}) ->
    .is_integer_type t
  > (env, Int(i) {Type(t)})
  + (env, Int(i) {TypeError("Cannot cast to expected type")});

typecheck: (env, Return(e){ReturnType(t)}) ->
  !typecheck (env, e {Type(t)});

typecheck: (env, Array(elems){Type(Array(elemtype, size))}) ->
     annotated_elems := !all[.annotate[Type(elemtype)]] elems
  in checked_elems   := !all[.typecheck_env[env]] annotated_elems
  in (env, Array(checked_elems){Type(Array(elemtype, size))});

typecheck: (env, Ref(n){Type(t)}) ->
     Type(lt) := .get[n] env
  in (env, .eq (lt, t) > Ref(n){Type(t)} + Ref(n){TypeError("Different type")});

typecheck: (env, Appl(Ref(fn), arg){Type(t)}) -> 
     Type(Func(i, o)) := .get[fn] env
  in checked_arg := !typecheck (env, arg {Type(i)}) > .second
  in (env, .eq (o, t) > Appl(fn, arg){Type(o)} + TypeError("Different types"));

typecheck_env[env]: t -> .typecheck (env, t) > .second;

is_integer_type: Builtin(ui8) -> .id;

typeof: t -> Type(!typeof_type t);
typeof_type: TypeId("ui8") -> Builtin("ui8");
typeof_type: TypeId(n)     -> Ref(n);
typeof_type: TypeTuple()   -> Tuple();
typeof_type: TypeArray(ts, s) -> Array(!typeof_type ts, s);
typeof_type: FnType(i, o)  -> Func(!typeof_type i, !typeof_type o);

get_out_type: Func(i, o) -> Type(o);
get_out_type: Type(Func(i, o)) -> Type(o);

get_in_type: Func(i, o) -> Type(i);
get_in_type: Type(Func(i, o)) -> Type(i);
